With IR Illuminator:
- Use Dot pattern of 50 power

depth image corresponds to left IR image (infrared stream #1)
- I want to convert the depth info to meters



Things to record:
have a rigid transform from appendage frame to US tip frame in a .txt

in calibrating.csv:
- Pose of xiphoid process and points on mother's stomach => Goes to a separate csv which is updated by GUI when pressed
- Record time when last point is captured

in scannnig.csv:
Initially:
- Force zeroing (amount to offset x,y,z, computed at start using GUI)
- Force Calibration Matrix => stored in separate .csv, but imported
- Force Correction Matrix => stored in separate .csv, but imported
- Left IR Intrinsics
- Depth Scale


On every iteration
- Depth Video (corresponding frame in .csv) => This is what we synchronize to 
- US Video (corresponding frame in .csv) 
- Pose 
- Force
- IMU

scanning.csv format (header):

system time, run time, depth frame #, us frame #, CAM_T_US,T00,T01,T02,R00,R01,R02,R10,R11,R12,R20,R21,R22,FORCE_RAW,fr0,fr1,fr2,fr3,fr4,fr5,fr6,fr7,fr8,fr9,fr10,fr11,FORCE_XYZ,fx,fy,fz,IMU,temp,g0,g1,g2,a0,a1,a2


data directory organization:

- data => root_path
  - P01 => participant_directory (increments and creates new if NaN's, creates new if it doesn't exist)
    - calibrate_datetime.csv 
    - scan_datetime.csv (creates filename)
    - depth_frames_datetime/
      - depthframe_1.png
  - P02
    - ...



Video File Size Tests (15 seconds of run-time):

-i pipe: -vcodec ffv1 -pix_fmt gray16le
102 MB

-i pipe: -vcodec ffv1 -level 3 -coder 1 -pix_fmt gray16le
100 MB

-i pipe: -vcodec ffv1 -level 3 -coder 2 -pix_fmt gray16le
91.3 MB

-i pipe: -vcodec ffv1 -level 3 -coder 2 -slices 4 -pix_fmt gray16le
79.0 MB

-i pipe: -vcodec ffv1 -level 3 -coder 2 -slices 4 -g 1 -pix_fmt gray16le

94.7 MB

-i pipe: -vcodec ffv1 -level 3 -coder 2 -slices 4 -context 1 -pix_fmt gray16le
81.0 MB

-i pipe: -vcodec ffv1 -level 3 -coder 2 -slices 4 -context 1 -g 1 -pix_fmt gray16le
98.1 MB



Video File Size Tests with different real-sense settings (15 seconds):

all with above optimized codec
- 848x480 fps=90.0f
78.8 MB

- 848x480 fps=60.0f
78.2 MB

- 848x480 fps=30.0f
47.4 MB

- 640x480 fps=30.0f
34.6 MB



Now with the zstandard library for compression:

